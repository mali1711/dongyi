<?php

namespace app\api\controller;

use think\Controller;
use think\Request;
use think\Validate;

class Common extends Controller
{
    protected $requestl;

    protected $validate;

    protected $params;//过滤符合要求的参数
    protected $rules = array(
        'User' => array(
            'login' => array(
                'user_name' => ['require', 'chsDash', 'max' => 20],
                'user_pwd' => 'require|length:32',
            ),
        ),
    );

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->request = Request::instance();
        $this->check_time($this->request->only(['time']));
        $this->check_token($this->request->param());
        $this->params = $this->check_params($this->request->except(['token'], 'time'));
    }

    public function check_time($arr)
    {
        if (!isset($arr['time']) || intval($arr['time']) <= 1) {
            $this->return_msg(400, '时间戳不存在');
        }
        if (time() - intval($arr['time']) > 60) {
            $this->≈(400, '请求超时');
        }
    }

    /**
     * @param $code
     * @param $msg
     * @param array $data
     */
    public function return_msg($code, $msg, $data = [])
    {
        $return_data['code'] = $code;
        $return_data['msg'] = $msg;
        $return_data['data'] = $data;
        echo json_encode($return_data);
        die;
    }

    /**
     * @param $arr验证token
     */
    public function check_token($arr)
    {
        if (!isset($arr) || empty($arr)) {
            $this->return_msg(400, 'token不能为空');
        }
        $app_token = $arr['token'];
        $service_token = '';
        foreach ($arr as $key => $value) {
            $service_token .= md5($value);
        }
        $service_token = md5('api_' . $service_token . '_api');
        if ($app_token !== $service_token) {
            $this->return_msg('400', 'token值不正确');
        }
    }

    public function check_params($arr)
    {
        /*********** 获取参数的验证规则  ***********/
        $rule = $this->rules[$this->request->controller()][$this->request->action()];
        /*********** 验证参数并返回错误  ***********/
        $this->validater = new Validate($rule);
        if (!$this->validater->check($arr)) {
            $this->return_msg(400, $this->validater->getError());
        }
        /*********** 如果正常,通过验证  ***********/
        return $arr;
    }
}
